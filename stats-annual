#! /usr/bin/env python

###
### generate stats files for annual data
###

import re, os, sys, argparse, csv, json, util
import pandas as pd

epilog=""

parser = argparse.ArgumentParser(description='Do some processing',
                                 formatter_class=argparse.RawTextHelpFormatter,
                                 epilog=epilog)

parser.add_argument("-i", "--input_from", default=None)
parser.add_argument("-g", "--group", help="bla bla", nargs=2, action="append")
parser.add_argument('input_file', metavar='INPUT_FILE', nargs='?')
parser.add_argument('output_file', metavar='OUTPUT_FILE', nargs='?')

args = parser.parse_args()

if args.input_from and (args.group or args.input_file or args.output_file):
    print "-i cannot be specified with any other args"
    sys.exit(-1)

jobs = []

if args.input_from:
    with open(args.input_from, "r") as f:
        for line in f:
            line = line.strip();
            jobs.append(json.loads(line))
else:
    jobs.append({"groups": args.group,
                 "in":  args.input_file,
                 "out": args.output_file})

for job in jobs:
    groupdict = dict(job['groups'])
    df = pd.read_csv(job['in'])
    df.set_index(['year'], inplace=True)
    all_columns = df.columns.values
    stats = pd.DataFrame()
    for group in groupdict:
        groupcols = [col for col in all_columns if re.match(groupdict[group], col)]
        gdf = df[groupcols]
        stats[group + 'median'] = gdf.median(axis=1)
        stats[group + 'min']    = gdf.min(axis=1)
        stats[group + 'max']    = gdf.max(axis=1)
        stats[group + 'p10']    = gdf.quantile(q=0.1, axis=1)
        stats[group + 'p90']    = gdf.quantile(q=0.9, axis=1)
    util.ensure_dirs(os.path.dirname(job['out']))
    stats.to_csv(job['out'], index=True, quoting=csv.QUOTE_NONE, float_format="%.3f")
    print "wrote %s" % job['out']
